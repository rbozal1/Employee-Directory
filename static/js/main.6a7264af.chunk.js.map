{"version":3,"sources":["inputFilter.js","employeeViewTable.js","App.js","API.js","reportWebVitals.js","index.js"],"names":["FilterInput","users","updateUsers","useState","inputValue","updateInput","useEffect","filteredUsers","filter","name","first","toLowerCase","indexOf","className","htmlFor","value","onChange","e","target","Table","sortedUsers","updateSortedUsers","scope","onClick","updateSort","sort","a","b","nameA","nameB","map","location","city","state","country","postcode","thumbnail","picture","cell","phone","gender","email","last","title","src","App","initialUsers","updateAvailableUsers","usersToRender","updateUsersToRender","axios","get","then","results","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a7264af.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst FilterInput = ({ users, updateUsers }) => {\r\n  const [inputValue, updateInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const filteredUsers =\r\n      inputValue === \"\"\r\n        ? users\r\n        : users.filter(\r\n            ({ name: { first } }) =>\r\n              first.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0\r\n          );\r\n\r\n    updateUsers(filteredUsers);\r\n  }, [inputValue, users]);\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n    <input value={inputValue} onChange={e => updateInput(e.target.value)} />\r\n    </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FilterInput;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ users }) => {\r\n  const [sortedUsers, updateSortedUsers] = useState([]);\r\n\r\n  useEffect(() => updateSortedUsers(users), [users]);\r\n\r\n  return (\r\n    <div>\r\n     <div className=\"text-center\">\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">title</th>\r\n            <th\r\n              scope=\"col\"\r\n              onClick={() => {\r\n                const usersCopy = [...users];\r\n                const updateSort = usersCopy.sort((a, b) => {\r\n                  const nameA = a.name.first;\r\n                  const nameB = b.name.first;\r\n\r\n                  if (nameA < nameB) {\r\n                    return -1;\r\n                  }\r\n                  if (nameA > nameB) {\r\n                    return 1;\r\n                  }\r\n\r\n                  return 0;\r\n                });\r\n\r\n                updateSortedUsers(updateSort);\r\n              }}\r\n            >\r\n              First\r\n            </th>\r\n            <th scope=\"col\">Last</th>\r\n            <th scope=\"col\">gender</th>\r\n            <th scope=\"col\">email</th>\r\n            <th scope=\"col\">phone</th>\r\n            <th scope=\"col\">cell</th>\r\n            <th scope=\"col\">city</th>\r\n            <th scope=\"col\">state</th>\r\n            <th scope=\"col\">country</th>\r\n            <th scope=\"col\">postcode</th>\r\n            <th scope=\"col\">picture</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedUsers.map(\r\n            ({\r\n              location: { city, state, country, postcode },\r\n              picture: { thumbnail },\r\n              cell,\r\n              phone,\r\n              gender,\r\n              email,\r\n              name: { first, last, title }\r\n            }) => (\r\n              <tr key={email}>\r\n                <td>{title}</td>\r\n                <th>{first}</th>\r\n                <td>{last}</td>\r\n                <td>{gender}</td>\r\n                <td>{email}</td>\r\n                <td>{phone}</td>\r\n                <td>{cell}</td>\r\n                <td>{city}</td>\r\n                <td>{state}</td>\r\n                <td>{country}</td>\r\n                <td>{postcode}</td>\r\n                <td>\r\n                  <img src={thumbnail} />\r\n                </td>\r\n\r\n                <td></td>\r\n              </tr>\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      </div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;","import React, { useEffect, useState } from \"react\";\nimport FilterInput from \"./inputFilter\";\nimport Table from \"./employeeViewTable\";\nimport { getUsers } from \"./API\";\nimport \"./App.css\";\n\nimport './App.css';\nimport \"./styles/header.css\";\n\nfunction App() {\n  const [initialUsers, updateAvailableUsers] = useState([]);\n  const [usersToRender, updateUsersToRender] = useState([]);\n\n  useEffect(() => {\n    getUsers().then(({ data: { results } }) => updateAvailableUsers(results));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n      <h1>Employee Directory</h1>\n      <p>\n        To filter by first name, please begin your search in the user input\n        below\n      </p>\n      </div>\n      \n      <FilterInput users= {initialUsers} updateUsers={updateUsersToRender} />\n      <Table users={usersToRender} />\n      </div>\n      \n  );\n}\n\nexport default App;\n","import axios from \"axios\";\r\n\r\nexport const getUsers = function() {\r\n  return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}